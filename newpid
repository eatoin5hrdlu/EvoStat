:- module( pid, [ launch_controllers/1,
		  pidstart/0,
		  pidstop/0,
		  limit/4,
		  compute/1,
		  pid_controlled/1 ]).
:- use_module(library(apply)).

:- dynamic deadzone/1, stop_controllers/0, iterm/4, state/9.
%
% Proportional/Integral/Differential (PID) control
% state machine via assert/retract of iterm/4, state/9.
%

pidstop  :- assert(stop_controllers).

pidstart :-
	thread_create(control, _, [alias(pidcontrol)]),
	writeln('PID controllers started').

launch_controllers(List) :-
	maplist(controller, List),
	pidstart.

% Info updated whenever compute is called:
% iterm( Id, IntegralTerm, LastInput, LastCycleTime )
%
% Per-controller information in:
% state( Id, Kp, Ki, Kd, Var, SetPoint, Min, Max, SampleTime)

% Time to next compute cycle for each controller
next_interval(Id:Interval) :-
	get_time(Now),
	iterm(Id, _, _, LastTime),
	state(Id,_P,_I,_D,_V,_S,_MN,_MX,DeltaT),
        Time is DeltaT - (Now - LastTime),
	limit(Time, 0, DeltaT, Interval).

% Create PID controller from:
% pid(Name, Kp, Ki, Kd, Var, SetPt, Min, Max, DeltaT)
% pid(lagoon,0.4,0.2,0.2, l, 30,   10, 100,  30 )

controller(pid(Id,Kp,Ki,Kd,Var,SetPt,Min,Max,DeltaT)) :-
        concat_atom([t,Var],Target),
	send(@Id, slot, Target, SetPt),
	get_time(Last),
	LastTime is Last - 1,
	retractall(iterm(Id,_,_,_)),
	assert(iterm(Id, SetPt, SetPt, LastTime)),
	retractall(state(Id,_P,_I,_D,_V,_S,_MN,_MX,_Ds)),
	assert(state(Id,Kp,Ki,Kd,Var,SetPt,Min,Max,DeltaT)),
	dblog(pid,created(pid,Id)).

control :-
	dblog(pid,control),
	iterm(_, _, _, _), % requires an active controller
	retractall(stop_controllers),
	repeat,
	    setof(T,next_interval(T), [Id:Interval|_]), % Soonest
	    dblog(pid,sleeping(Interval)),
	    sleep(Interval),
	    dblog(pid,compute(Id)),
	    compute(Id),             % Run one cycle
	    dblog(pid,compute(succeed)),
	stop_controllers,      % Signal to stop
	writeln('      Stopping PID Controllers').

compute(Id) :-
	iterm(Id, ITerm0, LastInput, LastTime),
	dblog(pid,iterm(Id)),
	get_time(Now),
	Elapsed is Now - LastTime,
	state(Id, Kp,Ki,Kd, Var, SetPoint, Min, Max, SampleTime),
	dblog(pid,compute(Elapsed,SampleTime)),
	Elapsed > SampleTime,
	get_input(Id, Var, Input),       % Get current value
	dblog(pid,got_input(Id,Var,Input)),
	Error is SetPoint - Input,       % Calculate  Error
	Integral is ITerm0 + Ki * Error, % New Integral Term
	limit(Integral,0, Max, ITerm),   % Enforce upper bound (allow zero)
	PID is Kp*Error + ITerm - Kd*(Input-LastInput),
	limit(PID, Min, Max, Output),    % Keep within bounds
	retractall(iterm(Id,_,_,_)),
	assert(iterm(Id,ITerm,Input,Now)),
	dblog(pid,in_out_error(Input,Output,Error)),
	( in_deadzone(Var, SetPoint, Input)
	-> dblog(pid,deadzone(Id,Var,SetPoint,Input,Output))
         ; dblog(pid,pid(Id,Var,Input,Output)),
 	  set_output(Var, Id, Input, Output)
	).

in_deadzone(Var, V1,V2) :- deadzone(Var, D), N is abs(V1-V2), N<D.

% limit(In, MinValue, MaxValue, Out).

limit(X, Min,   _, Min) :- X < Min, !.
limit(X,   _, Max, Max) :- X > Max, !.
limit(X,   _,   _,   X).

%
% pid_controlled/1 will verify PID controlled components from
% Name, Type, or Object, but only 'generates' a set of names.
% Change the order of memberchk/2 list to generate another Id,
% or change to member/2 to generate all three for each component.
% pid_controlled(?Id)
%

pid_controlled(Id) :-
    state(Name,_,_,_,_,_,_,_,_),    % There is a PID controller
    component(Name,Type,Obj),       % For component with this Id
    memberchk(Id, [Name,Type,Obj]). % (but only 'generate' Name)
