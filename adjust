:- use_module(library(time)).
:- use_module(newpid).
% The PID algorithm calls get_input/2 and set_output/3,
% but their implementation is PID independent, so they live here.

% 
% Maintaining a given flow rate must be possible with
% input and output valve timings between these limits.
%
% This could end up being an empirically derived table,
% but we will try a simple mathematical model because
% we only need min/max limits on valve timings, not
% a precise relationship with flow rates.
% 
% 1) Lagoons can be very different from the Host cultures
% 2) Input/Output valve cycle schedules can be different.
%
% Eg. Lagoon input time is in ms every 30 seconds
%     Lagoon output time is in ms every 90 seconds
%     Cellstat input time is in ms every 20 seconds
%     Cellstat output time is in ms every 90 seconds
%

:- dynamic dynamicFlowRateTable/5.
:- multifile dynamicFlowRateTable/5.

%
% (r1, r2, lx, ly)   (upper, lower reticule, readingX, readingY)
% (94, 109, 250, 121)
% reticuleCenterSU = ( r1+r2 )/2
% reticuleVolumeSU = ( r2 - r1 )
%
% scaleToSU     =   (reticuleVolumeSU / reticuleVolumePC)
% scaleToPC     =   (reticuleVolumePC / reticuleVolumeSU)
% 
% reticuleVolumePC   =   10
% targetVolumePC = 30     
% targetVolumeSU =  targetVolumePC * (reticuleVolumeSU/reticuleVolumePC)
% zeroLevelSU    =  reticuleCenterSU + targetVolumePC * (reticuleVolumeSU/reticuleVolumePC)
%
% inputValuePC  = ( zeroLevelSU - inputLevelSU )* scaleToPC
% 
% TEST: TARGET = ( center + TARGET * rvsu/rvpc - center) * (rcpc/rvsu)
% 
% fullVolumeSU   = 100 * (reticuleVolumeSU/reticuleVolumePC)
% zeroLelelSU    = reticuleCenterSU + targetVolumeSU

:- dynamic level/4.

get_error(Name, Error) :-
        dblog(pid,get_error(Name)),
        atom_codes(Name,NCodes),
	append(FCodes,[NC],NCodes),
	atom_codes( Functor, FCodes ),
	( number_codes( N, [NC]) ->
	  Query =.. [Functor,N,Error],
	  dblog(pid,calling(Query)),
	  ( call(Query) -> true ; dblog(pid,failed(Query)) ),
	  dblog(pid,called(Query))
	  ; dblog(pid,error(component_name,no_digit,Name))
	).

showFlowRateTable :-
        timestring(TimeStamp),
	flog(TimeStamp),
        flog('FLOW RATE TABLE'),
        flowRateTable(What,Dir,Rate,Min,Max),
        Term =.. [What,Dir,Rate,Min,Max],
        flog(Term),
        fail.
showFlowRateTable :- flog(tableDone).

% Assert can override Min/Max flow rate table for any component.

chkFlowRateTable(Type,Dir,Rate,Min,Max) :-
      flowRateTable(Type,Dir,Rate,Min,Max),!.

flowRateTable(Type,Dir,Rate,Min,Max) :-
          dynamicFlowRateTable(Type,Dir,Rate,Min,Max).

flowRateTable(Type,Dir,Rate,Min,Max) :-
          member(Type,[lagoon,cellstat]),				    
          component(_,Type,Obj),
	  get(Obj,tf,Rate),
          sFlowRateTable(Type,Dir,Rate,Min,Max).

sFlowRateTable(lagoon,in, Rate,MinVin,MaxVin) :-
          MinVin is integer(Rate * 100),
          MaxVin is integer(Rate * 2000).
sFlowRateTable(lagoon,out, Rate,MinVout,MaxVout) :-
          MinVout is integer(Rate * 100),
          MaxVout is integer(Rate * 2000).
sFlowRateTable(cellstat,in,Rate,MinVin,MaxVin) :-
          MinVin is integer(Rate * 100),
          MaxVin is integer(Rate * 2000).
sFlowRateTable(cellstat,out, Rate,MinVout,MaxVout) :-
          MinVout is 1,  % Lagoons might consume all host cells
          MaxVout is integer(Rate * 500).

inTimeRange(Obj, Val, Dir, NewVal) :-
     component(Comp,Type,Obj),
     ( Comp = host0, Val=0
     -> flog('            inTimeRange'(Obj,Val,Dir,NewVal))
     ; true
     ),
     get(Obj,tf,Rate),
     chkFlowRateTable(Type,Dir,Rate,Min,Max),
     compare_minmax(Op, Val, Min, Max),
     constrain(Op, Val, Min, Max, NewVal).

initPID :-
	pid_controllers(Cs),
	launch_controllers(Cs).

get_input(Name, Var, Value) :-
	component(Name,_,Obj),
	dblog(pid,waiting_get(Name,Var)),
	get(Obj,Var,Value),
	!.

get_input(Name, Var, _) :-
	dblog(pid,failed(get_input(Name,Var))),
	fail.
%
% set_output(Component, Var, Old, New)
%
% For liquid level control, level readings
% result in incremental changes in valve open times.
% Level too high: -inflow  +outflow 
%       too low:  +inflow  -outflow
%
% The Autosampler controls drain valves for the other components
% Lagoon name ends with <digit>: v<digit> is that lagoon's drain
% Otherwise it must be the Cellstat's drain 'v0'
%
% Each component has:
% 1) A primary input
% 2) multiple downstream outputs to other components
% 3) An output to the autosampler/drain
%
% The PID algorithm adjusts the timing of the primary input
% and output to the autosampler. Each of the outputs to other
% components are the primary inputs for those other components.
% As they are controlled by other PID controllers, the autosampler/drain
% output timing is the only one that will be controlled here.
%
% The total output of a given component is the sum of the inflow times
% of the downstream components (not controlled by this PID instance)
% and the residual timing for flow out through the autosampler/drain.
%
% To adjust timing for the autosampler drain for this component:
% 1) Compute SumDownstream from this components downstream component's inputs.
% 2) Add current autosampler/drain time to get CurrentOutput time.
% 3) Use the new PID output to find an adjusted NewOutput time.
% 4) Set the new autosampler drain time to  (NewOutput - SumDownstream)
%
% 
% For any given component with a PID controller,
% its successors may or may not have PID controllers.
%
% Succcessors with PID controllers represent outflow timings
% are treated as an uncontrolled lower-bound of the component's outflow.
% This sum-of-pid-controlled-successor-inputs will be subtracted from
% the desired (total) Outflow timing and the remainder is applied
% as the new timing of the specified Output-Valve.
%
% Important naming convention:
% If a component's drain valve is vN, the successor primary input is v(N+1)

downstream_times(ValveObj, OutValve, Total) :-
	increment_atom(OutValve, Valve), % Thanks to naming convention
	findall(InT, ( successor(ValveObj,InObj),
		       pid_controlled(InObj),
		       get(InObj,Valve,InT) ),   InTs),
	sum_list(InTs, Total).
%
% The system will be fully adaptable to multiple input/output configurations
% configurations as long as the sum-of-pid-controlled-successor-inputs
% does not exceed the flow rate of the predecessor vessel.
%
% When the flow rate (and not absolute volume) is to be controlled,
% the predecessor vessel adapts by increasing it's control level,
% thereby maintaining the original flow rate (expressed in volumes/hour)
% while supplying a larger quantity of liquid to it's successors.
%
% A negative Residual indicates that the Object's level/holding-volume
% must be raised. For a cellstat, do this slowly to maintain cell density.
%
level_to_timing(Old,New,OldTime,NewTime) :-
    NewTime is OldTime + (New-Old).

set_output(l, Name, Old, New) :-  % LEVEL
     component_drains(Name,_,OutName,OutValve),
     downstream_times(Name, OutValve, Downstream),
     get(@OutName, OutValve, Drain),
     TotalTime is Downstream + Drain,
     level_to_timing(Old, New, TotalTime, NewTime),
     Residual is NewTime - Downstream,
     ( Residual < 0
      -> get(@Name,l,OldLevel),
     	 NewLevel is OldLevel,
	 set(@Name,l,NewLevel)
      ;  adjust_valve(@Name, @OutName,OutValve,Residual,out)
     ).
     
	
% Different for levels (in and out valve timings)
%       or temperature (heater on/off duty cycle)

set_output(t, Name, Old, New) :-  % TEMPERATURE
     dblog(pid, adjust_NYI(Name,temperature,Old,New)).

adjust(l,Obj,Amt) :- dblog(pid, adjust(l,Obj,Amt)).

% Adjust level is two calls to adjust_valve (in and out)
adjust_level(Obj, Inflow) :-
     Obj = @Name,		  
     component_drain(Name,InValve,OutName,OutValve),
     adjust_valve(Obj,Obj,InValve,Inflow, in),
     flog(after(adjust_valve1)),
     assert(changed(Obj,InValve,Inflow)),
     component(OutName,_,VObj),
     Outflow is -Inflow,
     adjust_valve(Obj,VObj,OutValve,Outflow, out),
     flog(after(adjust_valve2)),
     assert(changed(VObj,OutValve,Outflow)).

adjust_valve(Obj, ValveObj, Valve, Amt, Dir) :-
      @Name = Obj,
      @VName = ValveObj,
      flog(adjusting(Name,VName,Valve,Amt,Dir)),
      get(ValveObj, Valve, Setting),
      New is Setting + Amt,
      flog(check_range(Name,VName,Valve,Dir,New)),
      ( (Name=host0,VName=host0,Valve=v0,New=0) -> trace ; true ),
      inTimeRange(Obj, New, Dir, Actual),
      flog(sending(VName, Valve,Actual)),
      send(ValveObj, Valve, Actual),
      flog(sent),
      flog(adjusted(Name,VName,Valve,old(Setting),delta(Amt),new(New),actual(Actual))).

close_all_valves :- findall(N,close_valves(N),_).

close_valves(Name) :-
       component_drain(Name,InValve,Name2,OutValve),
       component(Name,_,V1Obj),
       send(V1Obj, InValve, 0),
       component(Name2,_,V2Obj),
       send(V2Obj, OutValve, 0).

%
% Get the 'next' name, by incrementing the last 'letter'
% e.g.  abba -> abbb     v0 -> v1
%
increment_atom(Name,NextName) :-
	atom_codes(Name,Codes),
	append(Prefix,[IndexCode],Codes),
	Index is IndexCode + 1, % increment works on codes (in this case)
	append(Prefix,[Index],ICodes),
	atom_codes(NextName, ICodes).

%
% Total flow out for a vessel is the sum of the flow inputs
% to it's successors. The corresponding valve name for a
% successor is the incremented valve name  v0 -> v1.
%
% Valve vN of Object O shares flow time/volume with
% valves v(N+1) forall objects SO where successor(O,SO).
%
successor_type(nutrient, cellstat).
successor_type(nutrient, lagoon).
successor_type(inducer1, cellstat).
successor_type(inducer1, lagoon).
successor_type(inducer2, lagoon).
successor_type(cellstat, lagoon).

successor_name(Name,SName) :- component(Name,Type,_),
			      successor_type(Type,SType),
			      component(SName,SType).
			      
successor_obj(Obj,SObj) :- component(_,Type,Obj),
                     	   successor_type(Type,SType),
			   component(_,SType,SObj).
%
% Completely general successor relation (names, types, or objects)
%
successor(P, S) :-
    component( N, T, O),           % find a component
    arg(Index,component(N,  T, O), P), % with matching position,
    successor_type(T, ST),         % get successor(s)
    component(SN, ST, SO),
    arg(Index,component(SN,ST,SO), S). % use position to get Id


