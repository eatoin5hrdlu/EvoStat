%%%%%%%%%%% WEB SERVER 

:- set_prolog_flag(double_quotes,codes).
:- use_module(library(http/thread_httpd)).   % Server loop
:- use_module(library(http/http_ssl_plugin)).
:- use_module(library(http/http_dispatch)).  % dispatch table
:- use_module(library(http/http_header)).    % Terms -> HTML
:- use_module(library(http/html_write)).     % Terms -> HTML
:- use_module(library(http/html_head)).      % html_requires//1

:- use_module(library(http/http_authenticate)).
:- use_module(library(http/http_client)).

:- dynamic motd/1.
motd('Idle since Feb 5, 2018').

:- dynamic html_syntax/0.      % Assert for HTML dialect(EOL etc.)
html_syntax --> {html_syntax}. % Also callable as a grammar rule

:- multifile user:head//2.

user:head(_, Head) -->       % CSS: Add to every page
    html(head([ link([ type('text/css'),
    		rel('stylesheet'),
		href('/web/css/content.css') ])|Head])).



evostat_port(aristotle,21847).
evostat_port(buffon,   21848).
evostat_port(cuvier,   21846).
evostat_port(darwin,   21847).
evostat_port(erasmus,  21847).
evostat_port(wallace,  21847).

evostat_port(Port) :- hostname_root(H), evostat_port(H,Port).


running   :- evostat_port(Port),
             catch(thread_httpd:http_workers(Port,N),_,fail), N>0.

reload    :- stop_http, reconsult(webspec), start_http.

stop_http  :- evostat_port(Port),
              catch(http_stop_server(Port,[]),_,true).

start_http :-
    ( running -> true
     ;
     process_files('web/*', [authentication(basic(pws,'Secure Page'))]),
%     process_files('web/*',       [] ),  % No authentication
     process_files('web/*.html',   [] ),
     process_files('web/*.pdf',   [] ),
     process_files('web/css/*',    [] ),
     process_files('web/js/*',     [] ),
     process_files('web/images/*', [] ),
     evostat_port(Port),
     http_server( http_dispatch, [ port(Port) ])
%             ssl([ certificate_file('etc/server/server-cert.pem'),
%                   key_file('etc/server/server-key.pem'),
%                   password("apenoot1")
%             ])
%      ] )
    ).








process_files(WildCard, Security) :-
	expand_file_name(WildCard, Files),
	add_handlers(Files, Security).

suffix_mime( txt, [text/plain] ).
suffix_mime(   m, [text/x-matlab] ).
suffix_mime(  js, [text/javascript] ).
suffix_mime( css, [text/css] ).
suffix_mime( png, [image/png] ).
suffix_mime( gif, [image/gif] ).
suffix_mime( jpg, [image/jpg] ).
suffix_mime(jpeg, [image/jpg] ).
suffix_mime( mkv, [video/webm] ).
suffix_mime( avi, [video/x-msvideo] ).
suffix_mime( pdf, [application/pdf] ).
suffix_mime(html, [] ).

add_handlers([],_).
add_handlers([Path|T],Options) :-
	concat_atom(['/',Path], URL),
	file_base_name(Path, Base),
	file_name_extension(Root, Ext, Base),
	( add_handler(Ext, URL, Root, Path, Options)
	  -> true % message('Created a handler for ~w~n',[URL])
	  ; true % message('Did not create a handler for ~w~n',[URL])
	),
	add_handlers(T, Options).

add_handler(Fmt, URL, _Root, Path, Options) :-
	suffix_mime(Fmt, Mime),
	http_handler(URL,http_reply_file(Path,Mime),Options).

add_handler(pl, URL, Root, Path, Options) :-
	ensure_loaded(Path),
        time_file(Path,Time),
        assert(load_time(Path,Time)),
	http_handler(URL, Root, Options).

check_web_files :-
	load_time(Path,Loaded),
	time_file(Path,FileTime),
	FileTime > Loaded,
	reconsult(Path),
	write(user_error,'RELOADED'(Path)),nl(user_error),
	retract(load_time(Path,Loaded)),
	assert(load_time(Path,FileTime)),
	fail.
check_web_files.

%
% CGI stuff to process parameter lists
% for POST or GET HTTP Requests.
%

read_n_codes(0, _,  [] ) :- !.
read_n_codes(N, S,[C|T]) :- get_code(S,C), NN is N-1, read_n_codes(NN,S,T).

get_parameters(Request, Parameters) :-
    get_parameter_codes(Request, Codes),
    parse_parameters(Parameters, Codes, []).

get_parameter_codes(Request, Codes) :- % read POST parameters from Stream
    member(method(post), Request),
    !,
    member(input(Stream),Request),
    member(content_length(Length),Request),
    read_n_codes(Length, Stream, Codes).

get_parameter_codes(Request, Codes) :-  % GET parameters are in Request
    member(request_uri(URI),Request),
    atom_codes(URI, Codes).

parse_parameters([H|T]) -->
    [P1], parse_attribute(P1, PCodes), % consumes the '=' char
    [V1], parse_value(V1, VCodes),
    { name(Param, PCodes),
      name(Value, VCodes),
      functor(H,Param,1), arg(1,H,Value)
    },
    !,
    parse_parameters(T).
parse_parameters([]) --> [].

parse_value(0'&, []) --> !.
parse_value(C,[C|T]) --> [NC], !, parse_value(NC,T).
parse_value(C,  [C]) --> [].  % No & after last parameter

parse_attribute(0'=,[])  --> !.
parse_attribute(C,[C|T]) --> [NC], parse_attribute(NC,T).

message_list([]).
message_list([H|T]) :- message('~q~n', [H]), message_list(T).

% Javascript function and timeout call to return to the referring page

js_return(Request, Function, 'setTimeout("goback()",4000)' ) :-
  member(referer(Whence),Request),
  concat_atom(['function goback(){window.location="',Whence,'";}'],Function).


errorPage(Request, Message) :-
    js_return(Request, Function, Flyback),
    reply_html_page([ title('An Error has occurred'),
		      script([language(javascript)],[Function])],
		      body([onLoad(Flyback) ],
	              center(h1(Message)))
		   ).

%http_read_passwd_file(+Path, -Data)
%http_write_passwd_file(pws,"$1$jVPltO5Q$$1$jVPltO5Q$t9a46Bb18vp/BMoco70u21")

logIP(Req) :-
    memberchk(peer(IP),Req),
    open('ip.log', append, S),
    write(S,IP),nl(S),
    close(S).

evostatName(Req,Name) :- memberchk(search(L), Req),
		         memberchk(evostat(Name),L),
			 !.
evostatName(_,Name) :- config_name(Name,_).

refreshHead(Title,
  [ title(Title),
    link([rel(icon),href('./images/favicon.png')],[]),
    meta(['http-equiv'(refresh),content(20)],[]),% refresh
    script([ language(javascript) ],[])]).

defaultHead(Title,[title(Title),
		   link([rel(icon),href('./images/favicon.png')],[]) ]).

nocacheHead(Title,
  [ title(Title),
    link([rel(icon),href('./images/favicon.png')],[]),
    meta(['http-equiv'('Cache-Control'),content('no-cache, max-age=0, no-store, must-revalidate')],[]),
    meta(['http-equiv'('Pragma'),content('no-cache')],[]),
    meta([name(robots),content(noarchive)],[]),
    meta(['http-equiv'('Expires'),content(0)],[]),
    script([ language(javascript) ],[])]).

% Javascript to toggle between two images in web/images

toggle(script([language(javascript),type('text/javascript')],
 [ Script ]), A, B) :-
    Pre = 'var tggl = 1;
    function toggleimage() {
    var img = document.getElementById("timg");
    if (tggl == 1) {
      img.src = "/web/images/',
    Mid = '";
      tggl = 0;
    } else {
      img.src = "/web/images/',
    Post = '";
      tggl = 1;
    }
  }',
    concat_atom([Pre,A,Mid,B,Post],Script).

